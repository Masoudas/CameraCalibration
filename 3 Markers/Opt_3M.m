function [Err_s,Err_f,extr_cur,big_iteration]=Opt_3M(weight,im_coordinate,extr_cur,x_cur,P_point,focal_len,M,N_fp,N,dis12,dis13,dis23,itr_max,th)
%%%%%%%%%%%%%%%%%%%%%% Static Calibration Trial Run %%%%%%%%%%%%%%%%%%%%%%%
% Trial run to see which set of static parameters should be used

% -------------------------------------------------------------------------
% Very important notes :
% 1) Translation should be given in the world coordinates
% -------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Authors: M. Aghamohamadian-Sharbaf, H.R. Pourreza 10/6/2014
%--------------------------------------------------------------------------


%%%%%%%%%%%%%%%%%%%%%%%%% Parameter Definition %%%%%%%%%%%%%%%%%%%%%%%%%%%%
big_iteration=0;               % Big iteration counter
delta_X=ones(6*M+3*N,1);


%%%%%%%%%%%%%%%%%%%%%%% Dynamic Optimization Loop %%%%%%%%%%%%%%%%%%%%%%%%%%
% Initial value of E
Err=0;
for m=1:M
    for n=1:N
        for j=1:N_fp
            temp(1)=P_point(1,n) + ((-focal_len(n))*(extr_cur(n,5) + x_cur(N_fp*(m-1)+j,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(N_fp*(m-1)+j,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(N_fp*(m-1)+j,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3))))/(extr_cur(n,6) + x_cur(N_fp*(m-1)+j,1)*sin(extr_cur(n,2)) + x_cur(N_fp*(m-1)+j,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(N_fp*(m-1)+j,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1)));
            temp(2)=P_point(2,n) - ((-focal_len(n))*(extr_cur(n,4) + x_cur(N_fp*(m-1)+j,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(N_fp*(m-1)+j,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(N_fp*(m-1)+j,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3))))/(extr_cur(n,6) + x_cur(N_fp*(m-1)+j,1)*sin(extr_cur(n,2)) + x_cur(N_fp*(m-1)+j,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(N_fp*(m-1)+j,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1)));
            Err=Err+weight(m,n)*((temp(1)-im_coordinate(j,1,m,n))^2+(temp(2)-im_coordinate(j,2,m,n))^2);
        end
    end
end
mu=Err;
Err_s=Err;
extr_cur1=extr_cur;
x_cur1=x_cur;
P1=Err;
beta=1;
while (max(abs(delta_X(3*N+1:3*N+6*M)))>th && big_iteration<itr_max)
    big_iteration=big_iteration+1;
    %%%%%%%%%%%%%%%%% Rotation angle estimation %%%%%%%%%%%%%%%%%%
    extr_cur=Levenberg_3M(weight,extr_cur,x_cur,N_fp,N,M,im_coordinate,P_point,focal_len); % This is Levenburg-Marquardt opt. to estimate current rotation parameters
    
    %%% 3D Coordinates and translation parameters estimation %%%%%
    % Hessian matrix calculation
    Gradient=zeros(9*M+3*N,1);
    Hessian=zeros(9*M+3*N);
    temp=zeros(9,9);
    temp1=zeros(9,9);
    for m=1:M
        for n=1:N
            % Gradient of the objective function
            Gradient(1+(n-1)*3,1)=Gradient(1+(n-1)*3,1)+weight(m,n)*(- 2*(-focal_len(n))*((P_point(2,n) - im_coordinate(1,2,m,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-2,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-2,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) - 2*(-focal_len(n))*((P_point(2,n) - im_coordinate(2,2,m,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-1,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-1,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) - 2*(-focal_len(n))*((P_point(2,n) - im_coordinate(3,2,m,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))));
            Gradient(2+(n-1)*3,1)=Gradient(2+(n-1)*3,1)+weight(m,n)*(- 2*(-focal_len(n))*((im_coordinate(1,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-2,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-2,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))) - 2*(-focal_len(n))*((im_coordinate(2,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-1,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-1,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))) - 2*(-focal_len(n))*((im_coordinate(3,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))));
            Gradient(3+(n-1)*3,1)=Gradient(3+(n-1)*3,1)+weight(m,n)*(2*(P_point(2,n) - im_coordinate(1,2,m,n))*((P_point(2,n) - im_coordinate(1,2,m,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-2,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-2,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) + 2*(P_point(2,n) - im_coordinate(2,2,m,n))*((P_point(2,n) - im_coordinate(2,2,m,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-1,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-1,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) + 2*(P_point(2,n) - im_coordinate(3,2,m,n))*((P_point(2,n) - im_coordinate(3,2,m,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) + 2*(im_coordinate(1,1,m,n) - P_point(1,n))*((im_coordinate(1,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-2,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-2,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))) + 2*(im_coordinate(2,1,m,n) - P_point(1,n))*((im_coordinate(2,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-1,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-1,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))) + 2*(im_coordinate(3,1,m,n) - P_point(1,n))*((im_coordinate(3,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))));
            Gradient(3*N+1+(m-1)*9,1)=Gradient(3*N+1+(m-1)*9,1)+weight(m,n)*(2*((P_point(2,n) - im_coordinate(1,2,m,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-2,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-2,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3))))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) + 2*((im_coordinate(1,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-2,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-2,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3))))*(sin(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3))));
            Gradient(3*N+2+(m-1)*9,1)=Gradient(3*N+2+(m-1)*9,1)+weight(m,n)*(- 2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(1,2,m,n)))*((P_point(2,n) - im_coordinate(1,2,m,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-2,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-2,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(1,1,m,n) - P_point(1,n)))*((im_coordinate(1,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-2,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-2,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))));
            Gradient(3*N+3+(m-1)*9,1)=Gradient(3*N+3+(m-1)*9,1)+weight(m,n)*(- 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)))*((P_point(2,n) - im_coordinate(1,2,m,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-2,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-2,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) - 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)))*((im_coordinate(1,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-2,1)*sin(extr_cur(n,2)) + x_cur(3*m-2,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-2,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-2,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-2,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-2,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))));
            Gradient(3*N+4+(m-1)*9,1)=Gradient(3*N+4+(m-1)*9,1)+weight(m,n)*(2*((P_point(2,n) - im_coordinate(2,2,m,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-1,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-1,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3))))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) + 2*((im_coordinate(2,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-1,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-1,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3))))*(sin(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3))));
            Gradient(3*N+5+(m-1)*9,1)=Gradient(3*N+5+(m-1)*9,1)+weight(m,n)*(- 2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(2,2,m,n)))*((P_point(2,n) - im_coordinate(2,2,m,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-1,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-1,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(2,1,m,n) - P_point(1,n)))*((im_coordinate(2,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-1,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-1,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))));
            Gradient(3*N+6+(m-1)*9,1)=Gradient(3*N+6+(m-1)*9,1)+weight(m,n)*(- 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)))*((P_point(2,n) - im_coordinate(2,2,m,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m-1,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m-1,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) - 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)))*((im_coordinate(2,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m-1,1)*sin(extr_cur(n,2)) + x_cur(3*m-1,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m-1,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m-1,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m-1,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m-1,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))));
            Gradient(3*N+7+(m-1)*9,1)=Gradient(3*N+7+(m-1)*9,1)+weight(m,n)*(2*((P_point(2,n) - im_coordinate(3,2,m,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3))))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) + 2*((im_coordinate(3,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3))))*(sin(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3))));
            Gradient(3*N+8+(m-1)*9,1)=Gradient(3*N+8+(m-1)*9,1)+weight(m,n)*(- 2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(3,2,m,n)))*((P_point(2,n) - im_coordinate(3,2,m,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(3,1,m,n) - P_point(1,n)))*((im_coordinate(3,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))));
            Gradient(3*N+9+(m-1)*9,1)=Gradient(3*N+9+(m-1)*9,1)+weight(m,n)*(- 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)))*((P_point(2,n) - im_coordinate(3,2,m,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,4) + x_cur(3*m,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(3*m,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(3*m,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3)))) - 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)))*((im_coordinate(3,1,m,n) - P_point(1,n))*(extr_cur(n,6) + x_cur(3*m,1)*sin(extr_cur(n,2)) + x_cur(3*m,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(3*m,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1))) - (-focal_len(n))*(extr_cur(n,5) + x_cur(3*m,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(3*m,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(3*m,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3)))));
            
            % Hessian of the objective function
            temp(1,1)=6*(-focal_len(n))^2;
            temp(1,3)=- 2*(-focal_len(n))*(P_point(2,n) - im_coordinate(1,2,m,n)) - 2*(-focal_len(n))*(P_point(2,n) - im_coordinate(2,2,m,n)) - 2*(-focal_len(n))*(P_point(2,n) - im_coordinate(3,2,m,n));
            temp(1,4)=-2*(-focal_len(n))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3)));
            temp(1,5)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(1,2,m,n)));
            temp(1,6)=2*(-focal_len(n))*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)));
            temp(1,7)=-2*(-focal_len(n))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3)));
            temp(1,8)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(2,2,m,n)));
            temp(1,9)=2*(-focal_len(n))*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)));
            temp(1,10)=-2*(-focal_len(n))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3)));
            temp(1,11)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(3,2,m,n)));
            temp(1,12)=2*(-focal_len(n))*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)));
            
            temp(2,2)=6*(-focal_len(n))^2;
            temp(2,3)=- 2*(-focal_len(n))*(im_coordinate(1,1,m,n) - P_point(1,n)) - 2*(-focal_len(n))*(im_coordinate(2,1,m,n) - P_point(1,n)) - 2*(-focal_len(n))*(im_coordinate(3,1,m,n) - P_point(1,n));
            temp(2,4)=-2*(-focal_len(n))*(sin(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(2,5)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(1,1,m,n) - P_point(1,n)));
            temp(2,6)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)));
            temp(2,7)=-2*(-focal_len(n))*(sin(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(2,8)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(2,1,m,n) - P_point(1,n)));
            temp(2,9)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)));
            temp(2,10)=-2*(-focal_len(n))*(sin(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(2,11)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(3,1,m,n) - P_point(1,n)));
            temp(2,12)=2*(-focal_len(n))*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)));
            
            temp(3,3)=2*(im_coordinate(1,1,m,n) - P_point(1,n))^2 + 2*(P_point(2,n) - im_coordinate(1,2,m,n))^2 + 2*(im_coordinate(2,1,m,n) - P_point(1,n))^2 + 2*(P_point(2,n) - im_coordinate(2,2,m,n))^2 + 2*(im_coordinate(3,1,m,n) - P_point(1,n))^2 + 2*(P_point(2,n) - im_coordinate(3,2,m,n))^2;
            temp(3,4)=2*(P_point(2,n) - im_coordinate(1,2,m,n))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) + 2*(im_coordinate(1,1,m,n) - P_point(1,n))*(sin(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(3,5)=- 2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(1,2,m,n)))*(P_point(2,n) - im_coordinate(1,2,m,n)) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(1,1,m,n) - P_point(1,n)))*(im_coordinate(1,1,m,n) - P_point(1,n));
            temp(3,6)=- 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)))*(im_coordinate(1,1,m,n) - P_point(1,n)) - 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)))*(P_point(2,n) - im_coordinate(1,2,m,n));
            temp(3,7)=2*(P_point(2,n) - im_coordinate(2,2,m,n))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) + 2*(im_coordinate(2,1,m,n) - P_point(1,n))*(sin(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(3,8)=- 2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(2,2,m,n)))*(P_point(2,n) - im_coordinate(2,2,m,n)) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(2,1,m,n) - P_point(1,n)))*(im_coordinate(2,1,m,n) - P_point(1,n));
            temp(3,9)=- 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)))*(im_coordinate(2,1,m,n) - P_point(1,n)) - 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)))*(P_point(2,n) - im_coordinate(2,2,m,n));
            temp(3,10)=2*(P_point(2,n) - im_coordinate(3,2,m,n))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) + 2*(im_coordinate(3,1,m,n) - P_point(1,n))*(sin(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(3,11)=- 2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(3,2,m,n)))*(P_point(2,n) - im_coordinate(3,2,m,n)) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(3,1,m,n) - P_point(1,n)))*(im_coordinate(3,1,m,n) - P_point(1,n));
            temp(3,12)=- 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)))*(im_coordinate(3,1,m,n) - P_point(1,n)) - 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)))*(P_point(2,n) - im_coordinate(3,2,m,n));
            
            temp(4,4)=2*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3)))^2 + 2*(sin(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)))^2;
            temp(4,5)=-2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(1,2,m,n)))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(1,1,m,n) - P_point(1,n)))*(sin(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(4,6)=- 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) - 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)))*(sin(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            
            temp(5,5)=2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(1,2,m,n)))^2 + 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(1,1,m,n) - P_point(1,n)))^2;
            temp(5,6)=2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)))*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(1,1,m,n) - P_point(1,n))) + 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)))*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(1,2,m,n)));
            
            temp(6,6)=2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(1,1,m,n) - P_point(1,n)))^2 + 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(1,2,m,n)))^2;
            
            temp(7,7)=2*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3)))^2 + 2*(sin(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)))^2;
            temp(7,8)=- 2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(2,2,m,n)))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(2,1,m,n) - P_point(1,n)))*(sin(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(7,9)=- 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) - 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)))*(sin(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            
            temp(8,8)=2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(2,2,m,n)))^2 + 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(2,1,m,n) - P_point(1,n)))^2;
            temp(8,9)=2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)))*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(2,1,m,n) - P_point(1,n))) + 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)))*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(2,2,m,n)));
            
            temp(9,9)= 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(2,1,m,n) - P_point(1,n)))^2 + 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(2,2,m,n)))^2;
            
            temp(10,10)=2*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3)))^2 + 2*(sin(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)))^2;
            temp(10,11)=- 2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(3,2,m,n)))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) - 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(3,1,m,n) - P_point(1,n)))*(sin(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            temp(10,12)=- 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)))*(sin(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)) - (-focal_len(n))*cos(extr_cur(n,2))*cos(extr_cur(n,3))) - 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)))*(sin(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)) + (-focal_len(n))*cos(extr_cur(n,2))*sin(extr_cur(n,3)));
            
            temp(11,11)=2*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(3,2,m,n)))^2 + 2*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(3,1,m,n) - P_point(1,n)))^2;
            temp(11,12)=2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)))*((-focal_len(n))*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(im_coordinate(3,1,m,n) - P_point(1,n))) + 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)))*((-focal_len(n))*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + cos(extr_cur(n,2))*sin(extr_cur(n,1))*(P_point(2,n) - im_coordinate(3,2,m,n)));
            
            temp(12,12)= 2*((-focal_len(n))*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(im_coordinate(3,1,m,n) - P_point(1,n)))^2 + 2*((-focal_len(n))*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) - cos(extr_cur(n,1))*cos(extr_cur(n,2))*(P_point(2,n) - im_coordinate(3,2,m,n)))^2;
            
            Hessian(1+(n-1)*3:n*3,1+(n-1)*3:n*3)=Hessian(1+(n-1)*3:n*3,1+(n-1)*3:n*3)+weight(m,n)*temp(1:3,1:3);
            Hessian(3*N+1+(m-1)*9:3*N+m*9,3*N+1+(m-1)*9:3*N+m*9)=Hessian(3*N+1+(m-1)*9:3*N+m*9,3*N+1+(m-1)*9:3*N+m*9)+weight(m,n)*temp(4:12,4:12);
            Hessian(1+(n-1)*3:n*3,3*N+1+(m-1)*9:3*N+m*9)=Hessian(1+(n-1)*3:n*3,3*N+1+(m-1)*9:3*N+m*9)+weight(m,n)*temp(1:3,4:12);
        end
        % The penalty of the distance between the first and the second marker
        % Gradient
        Gradient(3*N+1+(m-1)*9,1)=Gradient(3*N+1+(m-1)*9,1)+beta*2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - dis12^2);
        Gradient(3*N+2+(m-1)*9,1)=Gradient(3*N+2+(m-1)*9,1)+beta*2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - dis12^2);
        Gradient(3*N+3+(m-1)*9,1)=Gradient(3*N+3+(m-1)*9,1)+beta*2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - dis12^2);
        Gradient(3*N+4+(m-1)*9,1)=Gradient(3*N+4+(m-1)*9,1)-beta*2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - dis12^2);
        Gradient(3*N+5+(m-1)*9,1)=Gradient(3*N+5+(m-1)*9,1)-beta*2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - dis12^2);
        Gradient(3*N+6+(m-1)*9,1)=Gradient(3*N+6+(m-1)*9,1)-beta*2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - dis12^2);
        
        % Hessian
        Hessian(3*N+1+(m-1)*9,3*N+1+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+1+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 + 2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))^2 - 4*dis12^2);
        Hessian(3*N+1+(m-1)*9,3*N+2+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+2+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2)));
        Hessian(3*N+1+(m-1)*9,3*N+3+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+3+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3)));
        Hessian(3*N+1+(m-1)*9,3*N+4+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+4+(m-1)*9)+beta*1*(4*dis12^2 - 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 - 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - 2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))^2 - 4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2);
        Hessian(3*N+1+(m-1)*9,3*N+5+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+5+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2)));
        Hessian(3*N+1+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+6+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3)));
        
        Hessian(3*N+2+(m-1)*9,3*N+2+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+2+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 + 2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))^2 - 4*dis12^2);
        Hessian(3*N+2+(m-1)*9,3*N+3+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+3+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3)));
        Hessian(3*N+2+(m-1)*9,3*N+4+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+4+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2)));
        Hessian(3*N+2+(m-1)*9,3*N+5+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+5+(m-1)*9)+beta*1*(4*dis12^2 - 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 - 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - 2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))^2 - 4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2);
        Hessian(3*N+2+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+6+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3)));
        
        Hessian(3*N+3+(m-1)*9,3*N+3+(m-1)*9)=Hessian(3*N+3+(m-1)*9,3*N+3+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 + 2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3))^2 - 4*dis12^2);
        Hessian(3*N+3+(m-1)*9,3*N+4+(m-1)*9)=Hessian(3*N+3+(m-1)*9,3*N+4+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3)));
        Hessian(3*N+3+(m-1)*9,3*N+5+(m-1)*9)=Hessian(3*N+3+(m-1)*9,3*N+5+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3)));
        Hessian(3*N+3+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+3+(m-1)*9,3*N+6+(m-1)*9)+beta*1*(4*dis12^2 - 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 - 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 - 2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3))^2 - 4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2);
        
        Hessian(3*N+4+(m-1)*9,3*N+4+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+4+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 + 2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))^2 - 4*dis12^2);
        Hessian(3*N+4+(m-1)*9,3*N+5+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+5+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2)));
        Hessian(3*N+4+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+6+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m-1,1))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3)));
        
        Hessian(3*N+5+(m-1)*9,3*N+5+(m-1)*9)=Hessian(3*N+5+(m-1)*9,3*N+5+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 + 2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))^2 - 4*dis12^2);
        Hessian(3*N+5+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+5+(m-1)*9,3*N+6+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m-1,2))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3)));
        
        Hessian(3*N+6+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+6+(m-1)*9,3*N+6+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2 + 2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m-1,3))^2 - 4*dis12^2);
        
        % The penalty of the distance between the first and the third marker
        % Gradient
        Gradient(3*N+1+(m-1)*9,1)=Gradient(3*N+1+(m-1)*9,1)+beta*2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*((x_cur(3*m-2,1) - x_cur(3*m,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m,3))^2 - dis13^2);
        Gradient(3*N+2+(m-1)*9,1)=Gradient(3*N+2+(m-1)*9,1)+beta*2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))*((x_cur(3*m-2,1) - x_cur(3*m,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m,3))^2 - dis13^2);
        Gradient(3*N+3+(m-1)*9,1)=Gradient(3*N+3+(m-1)*9,1)+beta*2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3))*((x_cur(3*m-2,1) - x_cur(3*m,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m,3))^2 - dis13^2);
        Gradient(3*N+7+(m-1)*9,1)=Gradient(3*N+7+(m-1)*9,1)-beta*2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*((x_cur(3*m-2,1) - x_cur(3*m,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m,3))^2 - dis13^2);
        Gradient(3*N+8+(m-1)*9,1)=Gradient(3*N+8+(m-1)*9,1)-beta*2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))*((x_cur(3*m-2,1) - x_cur(3*m,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m,3))^2 - dis13^2);
        Gradient(3*N+9+(m-1)*9,1)=Gradient(3*N+9+(m-1)*9,1)-beta*2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3))*((x_cur(3*m-2,1) - x_cur(3*m,1))^2 + (x_cur(3*m-2,2) - x_cur(3*m,2))^2 + (x_cur(3*m-2,3) - x_cur(3*m,3))^2 - dis13^2);
        
        
        % Hessian
        Hessian(3*N+1+(m-1)*9,3*N+1+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+1+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))^2 - 4*dis13^2);
        Hessian(3*N+1+(m-1)*9,3*N+2+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+2+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2)));
        Hessian(3*N+1+(m-1)*9,3*N+3+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+3+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3)));
        Hessian(3*N+1+(m-1)*9,3*N+7+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+7+(m-1)*9)+beta*1*(4*dis13^2 - 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 - 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 - 2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))^2 - 4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2);
        Hessian(3*N+1+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+8+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2)));
        Hessian(3*N+1+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+1+(m-1)*9,3*N+9+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3)));
        
        Hessian(3*N+2+(m-1)*9,3*N+2+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+2+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))^2 - 4*dis13^2);
        Hessian(3*N+2+(m-1)*9,3*N+3+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+3+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3)));
        Hessian(3*N+2+(m-1)*9,3*N+7+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+7+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2)));
        Hessian(3*N+2+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+8+(m-1)*9)+beta*1*(4*dis13^2 - 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 - 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 - 2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))^2 - 4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2);
        Hessian(3*N+2+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+2+(m-1)*9,3*N+9+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3)));
        
        Hessian(3*N+3+(m-1)*9,3*N+3+(m-1)*9)=Hessian(3*N+3+(m-1)*9,3*N+3+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3))^2 - 4*dis13^2);
        Hessian(3*N+3+(m-1)*9,3*N+7+(m-1)*9)=Hessian(3*N+3+(m-1)*9,3*N+7+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3)));
        Hessian(3*N+3+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+3+(m-1)*9,3*N+8+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3)));
        Hessian(3*N+3+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+3+(m-1)*9,3*N+9+(m-1)*9)+beta*1*(4*dis13^2 - 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 - 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 - 2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3))^2 - 4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2);
        
        Hessian(3*N+7+(m-1)*9,3*N+7+(m-1)*9)=Hessian(3*N+7+(m-1)*9,3*N+7+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))^2 - 4*dis13^2);
        Hessian(3*N+7+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+7+(m-1)*9,3*N+8+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2)));
        Hessian(3*N+7+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+7+(m-1)*9,3*N+9+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3)));
        
        Hessian(3*N+8+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+8+(m-1)*9,3*N+8+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))^2 - 4*dis13^2);
        Hessian(3*N+8+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+8+(m-1)*9,3*N+9+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-2,2) - 2*x_cur(3*m,2))*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3)));
        
        Hessian(3*N+9+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+9+(m-1)*9,3*N+9+(m-1)*9)+beta*1*(4*(x_cur(3*m-2,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-2,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-2,3) - 2*x_cur(3*m,3))^2 - 4*dis13^2);
        
        % The penalty of the distance between the second and the third marker
        % Gradient
        Gradient(3*N+4+(m-1)*9,1)=Gradient(3*N+4+(m-1)*9,1)+beta*2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*((x_cur(3*m-1,1) - x_cur(3*m,1))^2 + (x_cur(3*m-1,2) - x_cur(3*m,2))^2 + (x_cur(3*m-1,3) - x_cur(3*m,3))^2 - dis23^2);
        Gradient(3*N+5+(m-1)*9,1)=Gradient(3*N+5+(m-1)*9,1)+beta*2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))*((x_cur(3*m-1,1) - x_cur(3*m,1))^2 + (x_cur(3*m-1,2) - x_cur(3*m,2))^2 + (x_cur(3*m-1,3) - x_cur(3*m,3))^2 - dis23^2);
        Gradient(3*N+6+(m-1)*9,1)=Gradient(3*N+6+(m-1)*9,1)+beta*2*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3))*((x_cur(3*m-1,1) - x_cur(3*m,1))^2 + (x_cur(3*m-1,2) - x_cur(3*m,2))^2 + (x_cur(3*m-1,3) - x_cur(3*m,3))^2 - dis23^2);
        Gradient(3*N+7+(m-1)*9,1)=Gradient(3*N+7+(m-1)*9,1)-beta*2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*((x_cur(3*m-1,1) - x_cur(3*m,1))^2 + (x_cur(3*m-1,2) - x_cur(3*m,2))^2 + (x_cur(3*m-1,3) - x_cur(3*m,3))^2 - dis23^2);
        Gradient(3*N+8+(m-1)*9,1)=Gradient(3*N+8+(m-1)*9,1)-beta*2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))*((x_cur(3*m-1,1) - x_cur(3*m,1))^2 + (x_cur(3*m-1,2) - x_cur(3*m,2))^2 + (x_cur(3*m-1,3) - x_cur(3*m,3))^2 - dis23^2);
        Gradient(3*N+9+(m-1)*9,1)=Gradient(3*N+9+(m-1)*9,1)-beta*2*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3))*((x_cur(3*m-1,1) - x_cur(3*m,1))^2 + (x_cur(3*m-1,2) - x_cur(3*m,2))^2 + (x_cur(3*m-1,3) - x_cur(3*m,3))^2 - dis23^2);
        
        % Hessian
        Hessian(3*N+4+(m-1)*9,3*N+4+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+4+(m-1)*9)+beta*1*(4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))^2 - 4*dis23^2);
        Hessian(3*N+4+(m-1)*9,3*N+5+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+5+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2)));
        Hessian(3*N+4+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+6+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3)));
        Hessian(3*N+4+(m-1)*9,3*N+7+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+7+(m-1)*9)+beta*1*(4*dis23^2 - 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 - 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 - 2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))^2 - 4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2);
        Hessian(3*N+4+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+8+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2)));
        Hessian(3*N+4+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+4+(m-1)*9,3*N+9+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3)));
        
        Hessian(3*N+5+(m-1)*9,3*N+5+(m-1)*9)=Hessian(3*N+5+(m-1)*9,3*N+5+(m-1)*9)+beta*1*(4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))^2 - 4*dis23^2);
        Hessian(3*N+5+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+5+(m-1)*9,3*N+6+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3)));
        Hessian(3*N+5+(m-1)*9,3*N+7+(m-1)*9)=Hessian(3*N+5+(m-1)*9,3*N+7+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2)));
        Hessian(3*N+5+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+5+(m-1)*9,3*N+8+(m-1)*9)+beta*1*(4*dis23^2 - 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 - 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 - 2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))^2 - 4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2);
        Hessian(3*N+5+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+5+(m-1)*9,3*N+9+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3)));
        
        Hessian(3*N+6+(m-1)*9,3*N+6+(m-1)*9)=Hessian(3*N+6+(m-1)*9,3*N+6+(m-1)*9)+beta*1*(4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3))^2 - 4*dis23^2);
        Hessian(3*N+6+(m-1)*9,3*N+7+(m-1)*9)=Hessian(3*N+6+(m-1)*9,3*N+7+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3)));
        Hessian(3*N+6+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+6+(m-1)*9,3*N+8+(m-1)*9)-beta*1*(2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3)));
        Hessian(3*N+6+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+6+(m-1)*9,3*N+9+(m-1)*9)+beta*1*(4*dis23^2 - 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 - 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 - 2*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3))^2 - 4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2);
        
        Hessian(3*N+7+(m-1)*9,3*N+7+(m-1)*9)=Hessian(3*N+7+(m-1)*9,3*N+7+(m-1)*9)+beta*1*(4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))^2 - 4*dis23^2);
        Hessian(3*N+7+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+7+(m-1)*9,3*N+8+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2)));
        Hessian(3*N+7+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+7+(m-1)*9,3*N+9+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-1,1) - 2*x_cur(3*m,1))*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3)));
        
        Hessian(3*N+8+(m-1)*9,3*N+8+(m-1)*9)=Hessian(3*N+8+(m-1)*9,3*N+8+(m-1)*9)+beta*1*(4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))^2 - 4*dis23^2);
        Hessian(3*N+8+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+8+(m-1)*9,3*N+9+(m-1)*9)+beta*1*(2*(2*x_cur(3*m-1,2) - 2*x_cur(3*m,2))*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3)));
        
        Hessian(3*N+9+(m-1)*9,3*N+9+(m-1)*9)=Hessian(3*N+9+(m-1)*9,3*N+9+(m-1)*9)+beta*1*(4*(x_cur(3*m-1,1) - x_cur(3*m,1))^2 + 4*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 + 4*(x_cur(3*m-1,3) - x_cur(3*m,3))^2 + 2*(2*x_cur(3*m-1,3) - 2*x_cur(3*m,3))^2 - 4*dis23^2);
        
        % The penalty of the coplanarity constraint of the markers
        % Gradient
        Gradient(3*N+1+(m-1)*9,1)=Gradient(3*N+1+(m-1)*9,1)+beta*2*(x_cur(3*m-1,2) - x_cur(3*m,2))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2))) + 2*(x_cur(3*m-1,3) - x_cur(3*m,3))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)));
        Gradient(3*N+2+(m-1)*9,1)=Gradient(3*N+2+(m-1)*9,1)+beta*2*(x_cur(3*m-1,3) - x_cur(3*m,3))*((x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3))) - 2*(x_cur(3*m-1,1) - x_cur(3*m,1))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2)));
        Gradient(3*N+3+(m-1)*9,1)=Gradient(3*N+3+(m-1)*9,1)- beta*2*(x_cur(3*m-1,1) - x_cur(3*m,1))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3))) - 2*(x_cur(3*m-1,2) - x_cur(3*m,2))*((x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)));
        Gradient(3*N+4+(m-1)*9,1)=Gradient(3*N+4+(m-1)*9,1)- beta*2*(x_cur(3*m-2,2) - x_cur(3*m,2))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2))) - 2*(x_cur(3*m-2,3) - x_cur(3*m,3))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)));
        Gradient(3*N+5+(m-1)*9,1)=Gradient(3*N+5+(m-1)*9,1)+beta*2*(x_cur(3*m-2,1) - x_cur(3*m,1))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2))) - 2*(x_cur(3*m-2,3) - x_cur(3*m,3))*((x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)));
        Gradient(3*N+6+(m-1)*9,1)=Gradient(3*N+6+(m-1)*9,1)+beta*2*(x_cur(3*m-2,1) - x_cur(3*m,1))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3))) + 2*(x_cur(3*m-2,2) - x_cur(3*m,2))*((x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)));
        Gradient(3*N+7+(m-1)*9,1)=Gradient(3*N+7+(m-1)*9,1)+beta*2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2))) + 2*(x_cur(3*m-2,3) - x_cur(3*m-1,3))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)));
        Gradient(3*N+8+(m-1)*9,1)=Gradient(3*N+8+(m-1)*9,1)+beta*2*(x_cur(3*m-2,3) - x_cur(3*m-1,3))*((x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3))) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2)));
        Gradient(3*N+9+(m-1)*9,1)=Gradient(3*N+9+(m-1)*9,1)- beta*2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*((x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3))) - 2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*((x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - (x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)));
        
        % Hessian
        temp1(1,1)=2*(x_cur(3*m-1,2) - x_cur(3*m,2))^2 + 2*(x_cur(3*m-1,3) - x_cur(3*m,3))^2;
        temp1(1,2)=-2*(x_cur(3*m-1,1) - x_cur(3*m,1))*(x_cur(3*m-1,2) - x_cur(3*m,2));
        temp1(1,3)=-2*(x_cur(3*m-1,1) - x_cur(3*m,1))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        temp1(1,4)=- 2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-1,2) - x_cur(3*m,2)) - 2*(x_cur(3*m-2,3) - x_cur(3*m,3))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        temp1(1,5)=2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2)) + 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-1,2) - x_cur(3*m,2));
        temp1(1,6)=2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) + 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        temp1(1,7)=2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-1,2) - x_cur(3*m,2)) + 2*(x_cur(3*m-2,3) - x_cur(3*m-1,3))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        temp1(1,8)=2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2)) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-1,2) - x_cur(3*m,2));
        temp1(1,9)=2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        
        temp1(2,2)=2*(x_cur(3*m-1,1) - x_cur(3*m,1))^2 + 2*(x_cur(3*m-1,3) - x_cur(3*m,3))^2;
        temp1(2,3)=-2*(x_cur(3*m-1,2) - x_cur(3*m,2))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        temp1(2,4)=2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2)) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) + 2*(x_cur(3*m-1,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m,2));
        temp1(2,5)=- 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-1,1) - x_cur(3*m,1)) - 2*(x_cur(3*m-2,3) - x_cur(3*m,3))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        temp1(2,6)=2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) + 2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        temp1(2,7)=2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2)) - 2*(x_cur(3*m-1,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2));
        temp1(2,8)=2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-1,1) - x_cur(3*m,1)) + 2*(x_cur(3*m-2,3) - x_cur(3*m-1,3))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        temp1(2,9)=2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) - 2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-1,3) - x_cur(3*m,3));
        
        temp1(3,3)=2*(x_cur(3*m-1,1) - x_cur(3*m,1))^2 + 2*(x_cur(3*m-1,2) - x_cur(3*m,2))^2;
        temp1(3,4)=2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) + 2*(x_cur(3*m-1,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m,3));
        temp1(3,5)=2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) - 2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) + 2*(x_cur(3*m-1,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m,3));
        temp1(3,6)=- 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-1,1) - x_cur(3*m,1)) - 2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-1,2) - x_cur(3*m,2));
        temp1(3,7)=2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) - 2*(x_cur(3*m-1,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3));
        temp1(3,8)=2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) - 2*(x_cur(3*m-1,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3));
        temp1(3,9)=2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-1,1) - x_cur(3*m,1)) + 2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-1,2) - x_cur(3*m,2));
        
        temp1(4,4)=2*(x_cur(3*m-2,2) - x_cur(3*m,2))^2 + 2*(x_cur(3*m-2,3) - x_cur(3*m,3))^2;
        temp1(4,5)=-2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m,2));
        temp1(4,6)=-2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m,3));
        temp1(4,7)=- 2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - 2*(x_cur(3*m-2,3) - x_cur(3*m-1,3))*(x_cur(3*m-2,3) - x_cur(3*m,3));
        temp1(4,8)=4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2)) - 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2));
        temp1(4,9)=4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3));
        
        temp1(5,5)=2*(x_cur(3*m-2,1) - x_cur(3*m,1))^2 + 2*(x_cur(3*m-2,3) - x_cur(3*m,3))^2;
        temp1(5,6)=-2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m,3));
        temp1(5,7)=4*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2)) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m,2));
        temp1(5,8)=- 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,1) - x_cur(3*m,1)) - 2*(x_cur(3*m-2,3) - x_cur(3*m-1,3))*(x_cur(3*m-2,3) - x_cur(3*m,3));
        temp1(5,9)=4*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3));
        
        temp1(6,6)=2*(x_cur(3*m-2,1) - x_cur(3*m,1))^2 + 2*(x_cur(3*m-2,2) - x_cur(3*m,2))^2;
        temp1(6,7)=4*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) - 2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3));
        temp1(6,8)=4*(x_cur(3*m-2,2) - x_cur(3*m,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3)) - 2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m,3));
        temp1(6,9)=4*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m,3)) - 2*(x_cur(3*m-2,1) - x_cur(3*m,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3));
        
        temp1(7,7)=2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2 + 2*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2;
        temp1(7,8)=-2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,2) - x_cur(3*m-1,2));
        temp1(7,9)=-2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))*(x_cur(3*m-2,3) - x_cur(3*m-1,3));
        
        temp1(8,8)=2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + 2*(x_cur(3*m-2,3) - x_cur(3*m-1,3))^2;
        temp1(8,9)=-2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))*(x_cur(3*m-2,3) - x_cur(3*m-1,3));
        
        temp1(9,9)=2*(x_cur(3*m-2,1) - x_cur(3*m-1,1))^2 + 2*(x_cur(3*m-2,2) - x_cur(3*m-1,2))^2;
        Hessian(3*N+1+(m-1)*9:3*N+9+(m-1)*9,3*N+1+(m-1)*9:3*N+9+(m-1)*9)=Hessian(3*N+1+(m-1)*9:3*N+9+(m-1)*9,3*N+1+(m-1)*9:3*N+9+(m-1)*9)+beta*temp1;
   
    end
    Hessian=(triu(ones(9*M+3*N),+1).*Hessian)'+triu(ones(9*M+3*N)).*Hessian;
        
    % Update calculation
    delta_X=(Hessian+mu*eye(3*N_fp*M+3*N))\(-Gradient); % Update vector calculation
    
    % Addition of updates to the current values
    for n=1:N
        extr_cur(n,4:6)=extr_cur(n,4:6)+delta_X(3*(n-1)+1:3*n)';
    end
    for m=1:M
        for j=1:N_fp
            x_cur(N_fp*(m-1)+j,:)=x_cur(N_fp*(m-1)+j,:)+delta_X(3*N+3*N_fp*(m-1)+N_fp*(j-1)+1:3*N+3*N_fp*(m-1)+N_fp*j)';
        end
    end
    
    %%%%%%%%%%% Projection error at each iteration %%%%%%%%%%%%%%%
    Err=0;
    for m=1:M
        for n=1:N
            for j=1:N_fp
                temp(1)=P_point(1,n) + ((-focal_len(n))*(extr_cur(n,5) + x_cur(N_fp*(m-1)+j,2)*(cos(extr_cur(n,1))*cos(extr_cur(n,3)) - sin(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) + x_cur(N_fp*(m-1)+j,3)*(cos(extr_cur(n,3))*sin(extr_cur(n,1)) + cos(extr_cur(n,1))*sin(extr_cur(n,2))*sin(extr_cur(n,3))) - x_cur(N_fp*(m-1)+j,1)*cos(extr_cur(n,2))*sin(extr_cur(n,3))))/(extr_cur(n,6) + x_cur(N_fp*(m-1)+j,1)*sin(extr_cur(n,2)) + x_cur(N_fp*(m-1)+j,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(N_fp*(m-1)+j,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1)));
                temp(2)=P_point(2,n) - ((-focal_len(n))*(extr_cur(n,4) + x_cur(N_fp*(m-1)+j,2)*(cos(extr_cur(n,1))*sin(extr_cur(n,3)) + cos(extr_cur(n,3))*sin(extr_cur(n,1))*sin(extr_cur(n,2))) + x_cur(N_fp*(m-1)+j,3)*(sin(extr_cur(n,1))*sin(extr_cur(n,3)) - cos(extr_cur(n,1))*cos(extr_cur(n,3))*sin(extr_cur(n,2))) + x_cur(N_fp*(m-1)+j,1)*cos(extr_cur(n,2))*cos(extr_cur(n,3))))/(extr_cur(n,6) + x_cur(N_fp*(m-1)+j,1)*sin(extr_cur(n,2)) + x_cur(N_fp*(m-1)+j,3)*cos(extr_cur(n,1))*cos(extr_cur(n,2)) - x_cur(N_fp*(m-1)+j,2)*cos(extr_cur(n,2))*sin(extr_cur(n,1)));
                Err=Err+weight(m,n)*((temp(1)-im_coordinate(j,1,m,n))^2+(temp(2)-im_coordinate(j,2,m,n))^2);
            end
        end
    end
    if (P1<Err)
        mu=2*mu;
        extr_cur=extr_cur1;
        x_cur=x_cur1;
    elseif (P1>=Err)
        mu=0.5*mu;
        extr_cur1=extr_cur;
        x_cur1=x_cur;
        P1=Err;
        beta=2*beta;
    end
end
Err_f=Err;
end